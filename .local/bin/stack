#!/usr/bin/env python3

from argparse import ArgumentParser
from pathlib import Path

P_HELP = "Pop N items (default 1)"
S_HELP = "Show N items (default all)"
B_HELP = "Location of stacks (default ~/.stacks)"
N_HELP = 'Name of stack (default "default")'
PUSH_HELP = "Push subsequent items one by one"

parser = ArgumentParser(description="Command-line note-taking utility")
parser.add_argument("--basedir", type=Path, default=Path.home() / ".stack", help=B_HELP)
parser.add_argument("stack", nargs="?", default="default", help=N_HELP)
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("--push", metavar="VAL", nargs="+", help=PUSH_HELP)
group.add_argument("--pop", metavar="N", type=int, const="1", nargs="?", help=P_HELP)
group.add_argument(
    "--show", metavar="N", type=int, default="0", const=None, nargs="?", help=S_HELP
)
group.add_argument("--create", action="store_true", help="Create a new stack")
group.add_argument("--delete", action="store_true", help="Delete an existing stack")
group.add_argument("--list", action="store_true", help="List all stacks")
args = parser.parse_args()

if args.list:
    print([p.name for p in args.basedir.iterdir()])
    exit(0)

spath: Path = args.basedir / args.stack
if args.create:
    with open(spath, "x"):
        pass
elif args.delete:
    spath.unlink()
else:
    with open(spath, "r") as stack:
        lines = stack.readlines()

    print("".join(lines[: args.pop or args.show]), end="")
    if args.push:
        open(spath, "w").writelines([a + "\n" for a in args.push[::-1]] + lines)
    elif args.pop:
        open(spath, "w").writelines(lines[args.pop :])
